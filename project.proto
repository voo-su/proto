syntax = "proto3";

package project;

option go_package = "voo.su/api/grpc/pb/project;pb";

import "common/common.proto";

service ProjectService {
  // Creates a new project
  rpc Create(ProjectCreateRequest) returns (ProjectCreateResponse);

  // Retrieves a list of projects available to the user
  rpc GetProjects(GetProjectsRequest) returns (GetProjectsResponse);

  // Retrieves detailed information about a specific project
  rpc Detail(ProjectDetailRequest) returns (ProjectDetailResponse);

  // Retrieves the list of members in a project
  rpc Members(ProjectMembersRequest) returns (ProjectMembersResponse);

  // Retrieves a list of friends that can be invited to a project
  rpc GetInviteFriends(ProjectInviteFriendsRequest) returns (ProjectInviteFriendsResponse);

  // Sends an invitation to users to join a project
  rpc Invite(ProjectInviteRequest) returns (ProjectInviteResponse);

  // Creates a new task within a project
  rpc CreateTask(ProjectTaskCreateRequest) returns (ProjectTaskCreateResponse);

  // Retrieves a list of tasks for a specific project
  rpc Tasks(ProjectTaskRequest) returns (ProjectTaskResponse);

  // Retrieves detailed information about a specific task
  rpc TaskDetail(ProjectTaskDetailRequest) returns (ProjectTaskDetailResponse);

  // Assigns or updates the executor (responsible user) for a task
  rpc Executor(ProjectExecutorRequest) returns (ProjectExecutorResponse);

  // Moves a task to a different status or column
  rpc TaskMove(ProjectTaskMoveRequest) returns (ProjectTaskMoveResponse);

  // Updates or retrieves the name/type of a task
  rpc TaskTypeName(ProjectTaskTypeNameRequest) returns (ProjectTaskTypeNameResponse);

  // Invites a user to be a co-executor (shared responsibility) of a task
  rpc TaskCoexecutorInvite(ProjectCoexecutorInviteRequest) returns (ProjectCoexecutorInviteResponse);

  // Retrieves a list of co-executors assigned to a task
  rpc TaskCoexecutors(ProjectCoexecutorsRequest) returns (ProjectCoexecutorsResponse);

  // Invites a user to watch a task (receive updates without being responsible)
  rpc TaskWatcherInvite(ProjectWatcherInviteRequest) returns (ProjectWatcherInviteResponse);

  // Retrieves a list of watchers assigned to a task
  rpc TaskWatchers(ProjectWatchersRequest) returns (ProjectWatchersResponse);

  // Creates a comment on a task
  rpc CreateComment(ProjectCommentCreateRequest) returns (ProjectCommentCreateResponse);

  // Retrieves a list of comments for a task
  rpc Comments(ProjectCommentRequest) returns (ProjectCommentResponse);
}

message ProjectCreateRequest {
  string title = 1;
  string ids = 2;
}

message ProjectCreateResponse {
  string id = 1;
}

message GetProjectsRequest {}

message GetProjectsResponse {
  message Item {
    string id = 1;
    string title = 2;
  }

  repeated Item items = 1;
}

message ProjectDetailRequest {
  string id = 1;
}

message ProjectDetailResponse {
  string id = 1;
  string name = 2;
}

message ProjectMembersRequest {
  string project_id = 1;
}

message ProjectMembersResponse {
  message Item {
    common.User user = 1;
  }

  repeated Item items = 1;
}

message ProjectInviteFriendsRequest {
  string project_id = 1;
}

message ProjectInviteFriendsResponse {
  message Item {
    common.User user = 1;
  }

  repeated Item items = 1;
}

message ProjectInviteRequest {
  string project_id = 1;
  string ids = 2;
}

message ProjectInviteResponse {}

message ProjectCommentCreateRequest {
  string task_id = 1;
  string comment = 2;
}

message ProjectCommentCreateResponse {
  int64 id = 1;
}

message ProjectCommentRequest {
  string task_id = 1;
}

message ProjectCommentResponse {
  message Item {
    int64 id = 1;
    string taskId = 2;
    string comment = 3;
    common.User user = 4;
    string created_at = 5;
  }

  repeated Item items = 1;
}

message ProjectTaskCreateRequest {
  string project_id = 1;
  int64 type_id = 2;
  string title = 3;
  string description = 4;
}

message ProjectTaskCreateResponse {
  string id = 1;
}

message ProjectTaskRequest {
  string project_id = 1;
}

message ProjectTaskResponse {
  message Tasks {
    string id = 1;
    string title = 2;
  }

  message Categories {
    int64 id = 1;
    string title = 2;
    repeated Tasks tasks = 3;
  }

  repeated Categories categories = 1;
}

message ProjectExecutorRequest {
  string task_id = 1;
  int64 member_id = 2;
}

message ProjectExecutorResponse {}

message ProjectTaskMoveRequest {
  string project_id = 1;
  string task_id = 2;
  int64 from_id = 3;
  int64 to_id = 4;
}

message ProjectTaskMoveResponse {}

message ProjectTaskDetailRequest {
  string task_id = 1;
}

message ProjectTaskDetailResponse {
  message Member {
    common.User user = 1;
  }

  string id = 1;
  string title = 2;
  string description = 3;
  string created_at = 4;
  Member assigner = 5;
  Member executor = 6;
}

message ProjectTaskTypeNameRequest {
  string task_id = 1;
  string name = 2;
}

message ProjectTaskTypeNameResponse {}

message ProjectCoexecutorInviteRequest {
  string task_id = 1;
  string member_ids = 2;
}

message ProjectCoexecutorInviteResponse {}

message ProjectCoexecutorsRequest {
  string task_id = 1;
}

message ProjectCoexecutorsResponse {
  message Item {
    common.User user = 1;
  }

  repeated Item items = 1;
}

message ProjectWatcherInviteRequest {
  string task_id = 1;
  string member_ids = 2;
}

message ProjectWatcherInviteResponse {}

message ProjectWatchersRequest {
  string task_id = 1;
}

message ProjectWatchersResponse {
  message Item {
    common.User user = 1;
  }

  repeated Item items = 1;
}
